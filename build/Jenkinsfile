pipeline {
    agent any
    environment {
    	DOCKERHUB_CREDENTIALS=credentials('7d1fe5fe-ee76-43d9-a063-1e382b116917')
    }
    stages {
        stage('Clone sources') {
            steps {
                echo "The current build number is ${env.BUILD_NUMBER}"
                git branch: 'main',
                       url: 'https://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@github.com/Caracal-IT/HalloWorldDocker.git'
            }
        }
        stage('Build') {
            steps {
                sh 'docker-compose -f build/dockerCompose/docker-compose.prod.yml build mvc'
            }
        }
        stage('Test') {
            steps {
                script { 
                    def test_result = sh(script: 'docker-compose -f build/dockerCompose/docker-compose.prod.yml run mvctest', returnStatus: true) 
                    if (test_result != 0) { error 'Tests failed: HalloWorldDocker.Utilities.Tests.Unit' }
                }
            }
        }
        stage('Publish') {
            steps {
                sh 'docker-compose -f build/dockerCompose/docker-compose.prod.yml build mvcdocker'
            }
        }
        stage('Login - Docker Hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Push - Docker Hub') {

            steps {
                sh 'docker push divigraph/demo1:v$BUILD_NUMBER'
            }
        }
        stage('Cleanup') {
        
            steps {
                sh 'docker image rm divigraph/demo1:v$BUILD_NUMBER'
            }
         }
    }
}